top_level ::= program
case_sensitive = false

identifier         ::= standard ada_identifier
numeric_literal    ::= standard ada_numeric_literal
character_literal  ::= standard ada_character_literal
string_literal     ::= standard backslash_escaped_string
delimiter          ::= delimiters "(),;[]^."

block_comment_start = "(*"
block_comment_end   = "*)"

format ';' no_space_before new_line_after
format '(' space_before no_space_after
format ')' no_space_before space_after
format ',' no_space_before space_after
format '.' no_space_before no_space_after

format constant_definition indented_child
format type_definition indented_child
format variable_declaration indented_child
format statement indented_child
format 'end' new_line_before

program ::= program_heading ';' program_block '.'

program_heading ::= 'program' identifier [ '(' program_parameter_list ')' ]

program_parameter_list ::= identifier_list

program_block ::= block

block ::= label_declaration_part constant_definition_part type_definition_part
          variable_declaration_part procedure_and_function_declaration_part
          statement_part

label_declaration_part ::= [ 'label' < label / ',' > ';' ]

label ::= numeric_literal

constant_definition_part ::= [ 'const' < constant_definition ';' > ]

type_definition_part ::= [ 'type' < type_definition ';' > ]

variable_declaration_part ::= [ 'var' < variable_declaration > ]

variable_declaration ::= identifier_list ':' type_denoter ';'

procedure_and_function_declaration_part ::= { (procedure_declaration | function_declaration) ';' }

statement_part ::= compound_statement

constant_definition ::= identifier '=' constant

constant ::= [ sign ] (numeric_literal | constant_identifier )
           | string_literal

sign ::= '+' | '-'

constant_identifier ::= identifier

type_definition ::= identifier '=' type_denoter

type_denoter ::= type_identifier | new_type

new_type ::= new_ordinal_type | new_structured_type | new_pointer_type

type_identifier ::= identifier

simple_type ::= new_ordinal_type | type_identifier

new_ordinal_type ::= enumerated_type | subrange_type

ordinal_type ::= type_identifier | subrange_type

enumerated_type ::= '(' identifier_list ')'

identifier_list ::= < identifier / ',' >

subrange_type ::= constant '..' constant

new_structured_type ::= [ 'packed' ] unpacked_structured_type

unpacked_structured_type ::= array_type | record_type | set_type | file_type

array_type ::= 'array' '[' < index_type / ',' > ']' 'of' component_type

index_type ::= ordinal_type

component_type ::= type_denoter

record_type ::= 'record' field_list 'end'

field_list ::= fixed_part [';']

fixed_part ::= < record_section / ';' > 

record_section ::= identifier_list ':' type_denoter

set_type ::= 'set' 'of' base_type

base_type ::= ordinal_type

file_type ::= 'file' 'of' component_type

new_pointer_type ::= '^' domain_type

domain_type ::= type_identifier

variable_access ::= variable_identifier { variable_suffix }

variable_identifier ::= identifier

variable_suffix ::= indexed_variable | field_designator | identified_variable | function_designator

indexed_variable ::= '[' < index_expression / ',' > ']'

index_expression ::= expression

field_designator ::= '.' identifier

identified_variable ::= '^'

function_designator ::= '(' < actual_parameter / ',' > ')'

actual_parameter ::= expression

directive ::= 'forward'

procedure_declaration ::= procedure_heading ';' directive
                        | procedure_heading ';' procedure_block

procedure_heading ::= 'procedure' identifier [ formal_parameter_list ]

procedure_block ::= block

function_declaration ::= function_heading ';' directive
                       | function_heading ';' function_block

function_heading ::= 'function' [ formal_parameter_list ] ':' result_type

result_type ::= type_identifier

function_block ::= block

formal_parameter_list ::= '(' < formal_parameter_section / ';' ')'

formal_parameter_section ::= value_parameter_specification
                           | variable_parameter_specification
                           | procedural_parameter_specification						   
                           | functional_parameter_specification						   

value_parameter_specification ::= identifier_list ':' type_identifier

variable_parameter_specification ::= 'var' identifier_list ':' type_identifier

procedural_parameter_specification ::= procedure_heading

functional_parameter_specification ::= function_heading

expression ::= < simple_expression / relational_operator > 

simple_expression ::= [ sign ] < term / adding_operator >

term ::= < factor / multiplying_operator >

factor ::= variable_access | unsigned_constant  | set_constructor | '(' expression ')' | 'not' factor

unsigned_constant ::= numeric_literal | string_literal | 'nil'

set_constructor ::= '[' < member_designator / ',' > ']'

member_designator ::= expression [ '..' expression ]

multiplying_operator ::= '*' | '/' | 'div' | 'mod' | 'and'

adding_operator ::= '+' | '-' | 'or'

relational_operator ::= '=' | '<>' | '<' | '>' | '<=' | '>=' | 'in'

statement ::= [ label ':' ] [ (simple_statement | structured_statement) ]

simple_statement ::= assignment_statement
                   | procedure_statement
				   | goto_statement

assignment_statement ::= variable_access ':=' expression

procedure_statement ::= procedure_identifier [ actual_parameter_list ]

procedure_identifier ::= identifier

actual_parameter_list ::= '(' < actual_parameter / ',' > ')'

goto_statement ::= 'goto' label

structured_statement ::= compound_statement | conditional_statement | repetitive_statement | with_statement

statement_sequence ::= < statement / ';' >

compound_statement ::= 'begin' statement_sequence 'end'

conditional_statement ::= if_statement | case_statement

if_statement ::= 'if' expression 'then' statement [ 'else' statement ]

case_statement ::= 'case' case_index 'of' < case_list_element / ';' > [ ';'] 'end'

case_list_element ::= case_constant_list ':' statement

case_index ::= expression

case_constant_list ::= < case_constant / ',' > 

case_constant ::= constant

repetitive_statement ::= repeat_statement | while_statement | for_statement

repeat_statement ::= 'repeat' statement_sequence 'until' expression

while_statement ::= 'while' expression 'do' statement

for_statement ::= 'for' control_variable ':=' initial_value ( 'to' | 'downto' ) final_value 'do' statement

control_variable ::= variable_identifier

initial_value ::= expression

final_value ::= expression

with_statement ::= 'with' record_variable_list 'do' statement

record_variable_list ::= < variable_identifier / ',' > 

