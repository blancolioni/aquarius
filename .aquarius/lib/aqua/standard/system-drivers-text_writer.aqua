expanded class
   System.Drivers.Text_Writer

feature

   Write (File : Integer; Buffer : System.Memory.Block_32; Buffer_Len : System.Word_32)
      local
         Mem : System.Memory.Mem
         Len : System.Word_32
         FD  : System.Word_32
         Dst : System.Memory.Block_32
      do
         FD.Convert_From (File)
         create Dst.Make_From_Base_And_Bound (Buffer_Addr, Buffer_Addr.Offset_Words (Buffer_Len))
         Buffer.Copy (Dst, 0)
         Mem.Put_Word_32 (Length_Addr, Dst.Count)
         Mem.Put_Word_32 (File_Addr, FD)
         Mem.Put_Word_32 (Command_Addr, 3)
      end

    Open (Path : String) : Integer
        local
            Mem : System.Memory.Mem
            Len : System.Word_32
            R   : System.Word_32
        do
            Len.Convert_From (Path.Length)
            Path.Write_To_Memory (Buffer_Addr)
            Mem.Put_Word_32 (Length_Addr, Len)
            Mem.Put_Word_32 (Command_Addr, 16#0501#)   -- open file, create if not exists, replace if exists
            R := Mem.Get_Word_32 (Command_Addr)
            if R /= 0 then
                Error_Code := R
                Result := 0
                Result := Result - 1
            else
                Result.Convert_From (Mem.Get_Word_32 (File_Addr))
            end
        end

    Flush (File : Integer)
      local
         Mem : System.Memory.Mem
         Len : System.Word_32
         FD : System.Word_32
      do
         Len := Mem.Get_Word_32 (Length_Addr)
         FD.Convert_From (File)
         Mem.Put_Word_32 (Length_Addr, Len)
         Mem.Put_Word_32 (File_Addr, FD)
         Mem.Put_Word_32 (Command_Addr, 3)
         Mem.Put_Word_32 (Length_Addr, 0)
      end

    Close (File : Integer)
        local
            Mem : System.Memory.Mem
            FD  : System.Word_32
        do
            FD.Convert_From (File)
            Mem.Put_Word_32 (File_Addr, FD)
            Mem.Put_Word_32 (Command_Addr, 2)
        end

    Set_Output (Name : String)
       local
          Mem : System.Memory.Mem
       do
         --  Name.Write_To_Memory (Name_Addr)
         --  Mem.Put_Word_32 (Output_Addr, 1)
       end

   Error_Code : System.Word_32

feature { None }

   Base : System.Address
      local
         Meta : System.Drivers.Meta_Driver
      once
         Result := Meta.Install_Driver ("aqua-text-writer")
         --  Result := 16#FFFF_F000#
      end

   Command_Addr : System.Address
      once
         Result := Base
      end

   File_Addr : System.Address
      once
         Result := Base.Offset_Words (1)
      end

   Length_Addr : System.Address
      once
         Result := Base.Offset_Words (2)
      end

   Buffer_Addr : System.Address
      once
         Result := Base.Offset_Words (3)
      end

end
